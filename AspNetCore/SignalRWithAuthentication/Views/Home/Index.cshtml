@{
    ViewData["Title"] = "Home Page";
}


<h3>@ViewData["Title"]</h3>

<environment exclude="Development">
    <script src="https://unpkg.com/@@aspnet/signalr@@1.0.4/dist/browser/signalr.js"></script>
</environment>
<environment include="Development">
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
</environment>

<div class="signalr-demo">
    <form id="message-form">
        <input type="text" id="message-box" />
    </form>
    <hr />
    <ul id="messages"></ul>
</div>

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">&nbsp;</div>
        <div class="col-6">
            <input type="button" id="streamButton" value="Start Streaming" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">&nbsp;</div>
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>

<script>
    const messageForm = document.getElementById('message-form');
    const messageBox = document.getElementById('message-box');
    const messages = document.getElementById('messages');

    const options = {
        accessTokenFactory: getToken
    };
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chat", options)
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on('newMessage', (sender, messageText) => {
        console.log(` ${sender} : ${messageText} `);
        const newMessage = document.createElement('li');
        newMessage.appendChild(
            document.createTextNode(` ${sender} : ${messageText} `));
        messages.appendChild(newMessage);
    });

    connection.on('sync', (message) => {
        console.log('received sync - ' + message);
    });

    connection.start()
        .then(() => console.log('connected!'))
        .catch(console.error);

    messageForm.addEventListener('submit', ev => {
        ev.preventDefault();
        const message = messageBox.value;
        connection.invoke('SendMessage', message);
        messageBox.value = '';
    });

    function getToken() {
        const xhr = new XMLHttpRequest();
        return new Promise((resolve, reject) => {
            xhr.onreadystatechange = function () {
                if (this.readyState !== 4) return;
                if (this.status == 200) {
                    resolve(this.responseText);
                } else {
                    reject(this.statusText);
                }
            };
            xhr.open("GET", "/api/token");
            xhr.send();
        });
    }


    // streaming part goes below
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    document.getElementById("streamButton").addEventListener("click", (event) => __awaiter(this, void 0, void 0, function* () {
        try {
            // subscribe next, complete and error events and display messages in the messagesList element
            connection.stream("DelayCounter", 500)
                .subscribe({
                    next: (item) => {
                        var li = document.createElement("li");
                        li.textContent = item;
                        document.getElementById("messagesList").appendChild(li);
                    },
                    complete: () => {
                        var li = document.createElement("li");
                        li.textContent = "Stream completed";
                        document.getElementById("messagesList").appendChild(li);
                    },
                    error: (err) => {
                        var li = document.createElement("li");
                        li.textContent = err;
                        document.getElementById("messagesList").appendChild(li);
                    },
                });
        }
        catch (e) {
            console.error(e.toString());
        }
        event.preventDefault();
    }));

    //(() => __awaiter(this, void 0, void 0, function* () {
    //    try {
    //        yield connection.start();
    //    }
    //    catch (e) {
    //        console.error(e.toString());
    //    }
    //}))();
</script>